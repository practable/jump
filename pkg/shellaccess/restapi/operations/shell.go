// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShellHandlerFunc turns a function with the right signature into a shell handler
type ShellHandlerFunc func(ShellParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ShellHandlerFunc) Handle(params ShellParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ShellHandler interface for that can handle valid shell params
type ShellHandler interface {
	Handle(ShellParams, interface{}) middleware.Responder
}

// NewShell creates a new http.Handler for the shell operation
func NewShell(ctx *middleware.Context, handler ShellHandler) *Shell {
	return &Shell{Context: ctx, Handler: handler}
}

/*Shell swagger:route POST /shell/{shell_id} shell

shell

access the specified shell host

*/
type Shell struct {
	Context *middleware.Context
	Handler ShellHandler
}

func (o *Shell) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShellParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ShellOKBody shell o k body
//
// swagger:model ShellOKBody
type ShellOKBody struct {

	// uri
	URI string `json:"uri,omitempty"`
}

// Validate validates this shell o k body
func (o *ShellOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ShellOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ShellOKBody) UnmarshalBinary(b []byte) error {
	var res ShellOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Activity activity
//
// An activity represents connection details to instances of pre-agreed resource types such as video, data streams and user interfaces.
//
// swagger:model activity
type Activity struct {

	// Issuer
	// Required: true
	Iss *string `json:"Iss"`

	// Audience
	// Required: true
	Aud *string `json:"aud"`

	// description
	Description *Description `json:"description,omitempty"`

	// Expires At
	// Required: true
	Exp *float64 `json:"exp"`

	// Issued At
	Iat float64 `json:"iat,omitempty"`

	// Not before
	// Required: true
	Nbf *float64 `json:"nbf"`

	// A list of streams
	Streams []*Stream `json:"streams"`

	// Subject
	// Required: true
	Sub *string `json:"sub"`

	// User interfaces
	Uis []*UserInterface `json:"uis"`
}

// Validate validates this activity
func (m *Activity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Activity) validateIss(formats strfmt.Registry) error {

	if err := validate.Required("Iss", "body", m.Iss); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateAud(formats strfmt.Registry) error {

	if err := validate.Required("aud", "body", m.Aud); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *Activity) validateExp(formats strfmt.Registry) error {

	if err := validate.Required("exp", "body", m.Exp); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateNbf(formats strfmt.Registry) error {

	if err := validate.Required("nbf", "body", m.Nbf); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateStreams(formats strfmt.Registry) error {

	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	for i := 0; i < len(m.Streams); i++ {
		if swag.IsZero(m.Streams[i]) { // not required
			continue
		}

		if m.Streams[i] != nil {
			if err := m.Streams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Activity) validateSub(formats strfmt.Registry) error {

	if err := validate.Required("sub", "body", m.Sub); err != nil {
		return err
	}

	return nil
}

func (m *Activity) validateUis(formats strfmt.Registry) error {

	if swag.IsZero(m.Uis) { // not required
		return nil
	}

	for i := 0; i < len(m.Uis); i++ {
		if swag.IsZero(m.Uis[i]) { // not required
			continue
		}

		if m.Uis[i] != nil {
			if err := m.Uis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Activity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Activity) UnmarshalBinary(b []byte) error {
	var res Activity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

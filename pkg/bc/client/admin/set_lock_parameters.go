// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSetLockParams creates a new SetLockParams object
// with the default values initialized.
func NewSetLockParams() *SetLockParams {
	var ()
	return &SetLockParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetLockParamsWithTimeout creates a new SetLockParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetLockParamsWithTimeout(timeout time.Duration) *SetLockParams {
	var ()
	return &SetLockParams{

		timeout: timeout,
	}
}

// NewSetLockParamsWithContext creates a new SetLockParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetLockParamsWithContext(ctx context.Context) *SetLockParams {
	var ()
	return &SetLockParams{

		Context: ctx,
	}
}

// NewSetLockParamsWithHTTPClient creates a new SetLockParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetLockParamsWithHTTPClient(client *http.Client) *SetLockParams {
	var ()
	return &SetLockParams{
		HTTPClient: client,
	}
}

/*SetLockParams contains all the parameters to send to the API endpoint
for the set lock operation typically these are written to a http.Request
*/
type SetLockParams struct {

	/*Lock
	  set booking lock

	*/
	Lock bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set lock params
func (o *SetLockParams) WithTimeout(timeout time.Duration) *SetLockParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set lock params
func (o *SetLockParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set lock params
func (o *SetLockParams) WithContext(ctx context.Context) *SetLockParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set lock params
func (o *SetLockParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set lock params
func (o *SetLockParams) WithHTTPClient(client *http.Client) *SetLockParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set lock params
func (o *SetLockParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLock adds the lock to the set lock params
func (o *SetLockParams) WithLock(lock bool) *SetLockParams {
	o.SetLock(lock)
	return o
}

// SetLock adds the lock to the set lock params
func (o *SetLockParams) SetLock(lock bool) {
	o.Lock = lock
}

// WriteToRequest writes these params to a swagger request
func (o *SetLockParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param lock
	qrLock := o.Lock
	qLock := swag.FormatBool(qrLock)
	if qLock != "" {
		if err := r.SetQueryParam("lock", qLock); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

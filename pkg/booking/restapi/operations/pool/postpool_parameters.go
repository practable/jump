// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPostpoolParams creates a new PostpoolParams object
// with the default values initialized.
func NewPostpoolParams() PostpoolParams {

	var (
		// initialize parameters with default values

		authorizationDefault = string("Bearer {token}")
	)

	return PostpoolParams{
		Authorization: &authorizationDefault,
	}
}

// PostpoolParams contains all the bound params for the postpool operation
// typically these are obtained from a http.Request
//
// swagger:parameters Postpool
type PostpoolParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: header
	  Default: "Bearer {token}"
	*/
	Authorization *string
	/*duration of requested booking in seconds
	  Required: true
	  In: query
	*/
	Duration int64
	/*
	  Required: true
	  In: path
	*/
	PoolID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostpoolParams() beforehand.
func (o *PostpoolParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qDuration, qhkDuration, _ := qs.GetOK("duration")
	if err := o.bindDuration(qDuration, qhkDuration, route.Formats); err != nil {
		res = append(res, err)
	}

	rPoolID, rhkPoolID, _ := route.Params.GetOK("pool_id")
	if err := o.bindPoolID(rPoolID, rhkPoolID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *PostpoolParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewPostpoolParams()
		return nil
	}

	o.Authorization = &raw

	return nil
}

// bindDuration binds and validates parameter Duration from query.
func (o *PostpoolParams) bindDuration(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("duration", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("duration", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("duration", "query", "int64", raw)
	}
	o.Duration = value

	return nil
}

// bindPoolID binds and validates parameter PoolID from path.
func (o *PostpoolParams) bindPoolID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.PoolID = raw

	return nil
}

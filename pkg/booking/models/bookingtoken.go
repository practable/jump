// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Bookingtoken booking token details
//
// contains token plus its details
//
// swagger:model bookingtoken
type Bookingtoken struct {

	// Audience
	// Required: true
	Aud *string `json:"aud"`

	// Expires At
	// Required: true
	Exp *float64 `json:"exp"`

	// List of groups
	// Required: true
	Groups []string `json:"groups"`

	// Issued At
	Iat float64 `json:"iat,omitempty"`

	// Not before
	// Required: true
	Nbf *float64 `json:"nbf"`

	// List of scopes
	// Required: true
	Scopes []string `json:"scopes"`

	// Subject
	// Required: true
	Sub *string `json:"sub"`

	// booking token
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this bookingtoken
func (m *Bookingtoken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNbf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bookingtoken) validateAud(formats strfmt.Registry) error {

	if err := validate.Required("aud", "body", m.Aud); err != nil {
		return err
	}

	return nil
}

func (m *Bookingtoken) validateExp(formats strfmt.Registry) error {

	if err := validate.Required("exp", "body", m.Exp); err != nil {
		return err
	}

	return nil
}

func (m *Bookingtoken) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *Bookingtoken) validateNbf(formats strfmt.Registry) error {

	if err := validate.Required("nbf", "body", m.Nbf); err != nil {
		return err
	}

	return nil
}

func (m *Bookingtoken) validateScopes(formats strfmt.Registry) error {

	if err := validate.Required("scopes", "body", m.Scopes); err != nil {
		return err
	}

	return nil
}

func (m *Bookingtoken) validateSub(formats strfmt.Registry) error {

	if err := validate.Required("sub", "body", m.Sub); err != nil {
		return err
	}

	return nil
}

func (m *Bookingtoken) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Bookingtoken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bookingtoken) UnmarshalBinary(b []byte) error {
	var res Bookingtoken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Poolstore Pool Store
//
// complete status required for failover. Encoded strings used for convenience and seperation of concerns, at cost of performance.
//
// swagger:model poolstore
type Poolstore struct {

	// base64-encoded string representing bookingstore in JSON format
	// Required: true
	Booking *string `json:"booking"`

	// base64-encoded string representing PoolStore in JSON format
	// Required: true
	Pool *string `json:"pool"`
}

// Validate validates this poolstore
func (m *Poolstore) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBooking(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Poolstore) validateBooking(formats strfmt.Registry) error {

	if err := validate.Required("booking", "body", m.Booking); err != nil {
		return err
	}

	return nil
}

func (m *Poolstore) validatePool(formats strfmt.Registry) error {

	if err := validate.Required("pool", "body", m.Pool); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Poolstore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Poolstore) UnmarshalBinary(b []byte) error {
	var res Poolstore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

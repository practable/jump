// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostpoolHandlerFunc turns a function with the right signature into a postpool handler
type PostpoolHandlerFunc func(PostpoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostpoolHandlerFunc) Handle(params PostpoolParams) middleware.Responder {
	return fn(params)
}

// PostpoolHandler interface for that can handle valid postpool params
type PostpoolHandler interface {
	Handle(PostpoolParams) middleware.Responder
}

// NewPostpool creates a new http.Handler for the postpool operation
func NewPostpool(ctx *middleware.Context, handler PostpoolHandler) *Postpool {
	return &Postpool{Context: ctx, Handler: handler}
}

/*Postpool swagger:route POST /pool/{pool_id}/request pool postpool

pool

Request an activity from the pool

*/
type Postpool struct {
	Context *middleware.Context
	Handler PostpoolHandler
}

func (o *Postpool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostpoolParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

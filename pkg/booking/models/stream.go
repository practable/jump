// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stream stream
//
// Represents an assigned, valid booking slot for an individual piece of equipment
//
// swagger:model stream
type Stream struct {

	// Expires At
	Exp float64 `json:"exp,omitempty"`

	// Describes the stream, and doubles as template key in the URL
	// Required: true
	For *string `json:"for"`

	// Issued At
	Iat float64 `json:"iat,omitempty"`

	// Not Before
	Nbf float64 `json:"nbf,omitempty"`

	// JWT bearer token for submitting in the header when making the request at the URL
	// Required: true
	Token *string `json:"token"`

	// URL at which to obtain access to the stream (getting a redirect URL containing a one time code)
	// Required: true
	URL *string `json:"url"`

	// HTPP verb to use when making request to the URL
	Verb *string `json:"verb,omitempty"`
}

// Validate validates this stream
func (m *Stream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stream) validateFor(formats strfmt.Registry) error {

	if err := validate.Required("for", "body", m.For); err != nil {
		return err
	}

	return nil
}

func (m *Stream) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *Stream) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stream) UnmarshalBinary(b []byte) error {
	var res Stream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

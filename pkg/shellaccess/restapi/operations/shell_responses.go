// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ShellOKCode is the HTTP code returned for type ShellOK
const ShellOKCode int = 200

/*ShellOK shell o k

swagger:response shellOK
*/
type ShellOK struct {

	/*
	  In: Body
	*/
	Payload *ShellOKBody `json:"body,omitempty"`
}

// NewShellOK creates ShellOK with default headers values
func NewShellOK() *ShellOK {

	return &ShellOK{}
}

// WithPayload adds the payload to the shell o k response
func (o *ShellOK) WithPayload(payload *ShellOKBody) *ShellOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the shell o k response
func (o *ShellOK) SetPayload(payload *ShellOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShellOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ShellUnauthorizedCode is the HTTP code returned for type ShellUnauthorized
const ShellUnauthorizedCode int = 401

/*ShellUnauthorized Unauthorized

swagger:response shellUnauthorized
*/
type ShellUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewShellUnauthorized creates ShellUnauthorized with default headers values
func NewShellUnauthorized() *ShellUnauthorized {

	return &ShellUnauthorized{}
}

// WithPayload adds the payload to the shell unauthorized response
func (o *ShellUnauthorized) WithPayload(payload interface{}) *ShellUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the shell unauthorized response
func (o *ShellUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShellUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

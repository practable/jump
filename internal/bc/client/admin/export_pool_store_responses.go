// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/practable/relay/internal/bc/models"
)

// ExportPoolStoreReader is a Reader for the ExportPoolStore structure.
type ExportPoolStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportPoolStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportPoolStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportPoolStoreUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExportPoolStoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportPoolStoreOK creates a ExportPoolStoreOK with default headers values
func NewExportPoolStoreOK() *ExportPoolStoreOK {
	return &ExportPoolStoreOK{}
}

/* ExportPoolStoreOK describes a response with status code 200, with default header values.

ExportPoolStoreOK export pool store o k
*/
type ExportPoolStoreOK struct {
	Payload *models.Poolstore
}

func (o *ExportPoolStoreOK) Error() string {
	return fmt.Sprintf("[GET /admin/poolstore][%d] exportPoolStoreOK  %+v", 200, o.Payload)
}
func (o *ExportPoolStoreOK) GetPayload() *models.Poolstore {
	return o.Payload
}

func (o *ExportPoolStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Poolstore)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportPoolStoreUnauthorized creates a ExportPoolStoreUnauthorized with default headers values
func NewExportPoolStoreUnauthorized() *ExportPoolStoreUnauthorized {
	return &ExportPoolStoreUnauthorized{}
}

/* ExportPoolStoreUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExportPoolStoreUnauthorized struct {
	Payload interface{}
}

func (o *ExportPoolStoreUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/poolstore][%d] exportPoolStoreUnauthorized  %+v", 401, o.Payload)
}
func (o *ExportPoolStoreUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ExportPoolStoreUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportPoolStoreInternalServerError creates a ExportPoolStoreInternalServerError with default headers values
func NewExportPoolStoreInternalServerError() *ExportPoolStoreInternalServerError {
	return &ExportPoolStoreInternalServerError{}
}

/* ExportPoolStoreInternalServerError describes a response with status code 500, with default header values.

ExportPoolStoreInternalServerError export pool store internal server error
*/
type ExportPoolStoreInternalServerError struct {
	Payload interface{}
}

func (o *ExportPoolStoreInternalServerError) Error() string {
	return fmt.Sprintf("[GET /admin/poolstore][%d] exportPoolStoreInternalServerError  %+v", 500, o.Payload)
}
func (o *ExportPoolStoreInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *ExportPoolStoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PoolHandlerFunc turns a function with the right signature into a pool handler
type PoolHandlerFunc func(PoolParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PoolHandlerFunc) Handle(params PoolParams) middleware.Responder {
	return fn(params)
}

// PoolHandler interface for that can handle valid pool params
type PoolHandler interface {
	Handle(PoolParams) middleware.Responder
}

// NewPool creates a new http.Handler for the pool operation
func NewPool(ctx *middleware.Context, handler PoolHandler) *Pool {
	return &Pool{Context: ctx, Handler: handler}
}

/*Pool swagger:route GET /pool pool pool

pool

Get a list of descriptions of all pools available to the user

*/
type Pool struct {
	Context *middleware.Context
	Handler PoolHandler
}

func (o *Pool) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPoolParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ScopeType ScopeType
//
// Possible scopes are readonly, writeonly, readwrite, shellhost, shellclient
//
// swagger:model ScopeType
type ScopeType string

const (

	// ScopeTypeReadonly captures enum value "readonly"
	ScopeTypeReadonly ScopeType = "readonly"

	// ScopeTypeWriteonly captures enum value "writeonly"
	ScopeTypeWriteonly ScopeType = "writeonly"

	// ScopeTypeReadwrite captures enum value "readwrite"
	ScopeTypeReadwrite ScopeType = "readwrite"

	// ScopeTypeShellhost captures enum value "shellhost"
	ScopeTypeShellhost ScopeType = "shellhost"

	// ScopeTypeShellclient captures enum value "shellclient"
	ScopeTypeShellclient ScopeType = "shellclient"
)

// for schema
var scopeTypeEnum []interface{}

func init() {
	var res []ScopeType
	if err := json.Unmarshal([]byte(`["readonly","writeonly","readwrite","shellhost","shellclient"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scopeTypeEnum = append(scopeTypeEnum, v)
	}
}

func (m ScopeType) validateScopeTypeEnum(path, location string, value ScopeType) error {
	if err := validate.EnumCase(path, location, value, scopeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this scope type
func (m ScopeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScopeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

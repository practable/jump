// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRequestSessionByPoolIDParams creates a new RequestSessionByPoolIDParams object
// with the default values initialized.
func NewRequestSessionByPoolIDParams() *RequestSessionByPoolIDParams {
	var ()
	return &RequestSessionByPoolIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRequestSessionByPoolIDParamsWithTimeout creates a new RequestSessionByPoolIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRequestSessionByPoolIDParamsWithTimeout(timeout time.Duration) *RequestSessionByPoolIDParams {
	var ()
	return &RequestSessionByPoolIDParams{

		timeout: timeout,
	}
}

// NewRequestSessionByPoolIDParamsWithContext creates a new RequestSessionByPoolIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewRequestSessionByPoolIDParamsWithContext(ctx context.Context) *RequestSessionByPoolIDParams {
	var ()
	return &RequestSessionByPoolIDParams{

		Context: ctx,
	}
}

// NewRequestSessionByPoolIDParamsWithHTTPClient creates a new RequestSessionByPoolIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRequestSessionByPoolIDParamsWithHTTPClient(client *http.Client) *RequestSessionByPoolIDParams {
	var ()
	return &RequestSessionByPoolIDParams{
		HTTPClient: client,
	}
}

/*RequestSessionByPoolIDParams contains all the parameters to send to the API endpoint
for the request session by pool ID operation typically these are written to a http.Request
*/
type RequestSessionByPoolIDParams struct {

	/*Duration
	  duration of requested booking in seconds

	*/
	Duration int64
	/*PoolID*/
	PoolID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) WithTimeout(timeout time.Duration) *RequestSessionByPoolIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) WithContext(ctx context.Context) *RequestSessionByPoolIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) WithHTTPClient(client *http.Client) *RequestSessionByPoolIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDuration adds the duration to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) WithDuration(duration int64) *RequestSessionByPoolIDParams {
	o.SetDuration(duration)
	return o
}

// SetDuration adds the duration to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) SetDuration(duration int64) {
	o.Duration = duration
}

// WithPoolID adds the poolID to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) WithPoolID(poolID string) *RequestSessionByPoolIDParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the request session by pool ID params
func (o *RequestSessionByPoolIDParams) SetPoolID(poolID string) {
	o.PoolID = poolID
}

// WriteToRequest writes these params to a swagger request
func (o *RequestSessionByPoolIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param duration
	qrDuration := o.Duration
	qDuration := swag.FormatInt64(qrDuration)
	if qDuration != "" {
		if err := r.SetQueryParam("duration", qDuration); err != nil {
			return err
		}
	}

	// path param pool_id
	if err := r.SetPathParam("pool_id", o.PoolID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePoolStoreReader is a Reader for the DeletePoolStore structure.
type DeletePoolStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePoolStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 401:
		result := NewDeletePoolStoreUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePoolStoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeletePoolStoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeletePoolStoreUnauthorized creates a DeletePoolStoreUnauthorized with default headers values
func NewDeletePoolStoreUnauthorized() *DeletePoolStoreUnauthorized {
	return &DeletePoolStoreUnauthorized{}
}

/* DeletePoolStoreUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeletePoolStoreUnauthorized struct {
	Payload interface{}
}

func (o *DeletePoolStoreUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /admin/poolstore][%d] deletePoolStoreUnauthorized  %+v", 401, o.Payload)
}
func (o *DeletePoolStoreUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *DeletePoolStoreUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolStoreNotFound creates a DeletePoolStoreNotFound with default headers values
func NewDeletePoolStoreNotFound() *DeletePoolStoreNotFound {
	return &DeletePoolStoreNotFound{}
}

/* DeletePoolStoreNotFound describes a response with status code 404, with default header values.

Unauthorized
*/
type DeletePoolStoreNotFound struct {
	Payload interface{}
}

func (o *DeletePoolStoreNotFound) Error() string {
	return fmt.Sprintf("[DELETE /admin/poolstore][%d] deletePoolStoreNotFound  %+v", 404, o.Payload)
}
func (o *DeletePoolStoreNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DeletePoolStoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePoolStoreInternalServerError creates a DeletePoolStoreInternalServerError with default headers values
func NewDeletePoolStoreInternalServerError() *DeletePoolStoreInternalServerError {
	return &DeletePoolStoreInternalServerError{}
}

/* DeletePoolStoreInternalServerError describes a response with status code 500, with default header values.

DeletePoolStoreInternalServerError delete pool store internal server error
*/
type DeletePoolStoreInternalServerError struct {
	Payload interface{}
}

func (o *DeletePoolStoreInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /admin/poolstore][%d] deletePoolStoreInternalServerError  %+v", 500, o.Payload)
}
func (o *DeletePoolStoreInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *DeletePoolStoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

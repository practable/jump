// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/relay/pkg/bc/models"
)

// ImportPoolStoreReader is a Reader for the ImportPoolStore structure.
type ImportPoolStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportPoolStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportPoolStoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewImportPoolStoreUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewImportPoolStoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewImportPoolStoreOK creates a ImportPoolStoreOK with default headers values
func NewImportPoolStoreOK() *ImportPoolStoreOK {
	return &ImportPoolStoreOK{}
}

/*ImportPoolStoreOK handles this case with default header values.

ImportPoolStoreOK import pool store o k
*/
type ImportPoolStoreOK struct {
	Payload *models.StoreStatus
}

func (o *ImportPoolStoreOK) Error() string {
	return fmt.Sprintf("[POST /admin/poolstore][%d] importPoolStoreOK  %+v", 200, o.Payload)
}

func (o *ImportPoolStoreOK) GetPayload() *models.StoreStatus {
	return o.Payload
}

func (o *ImportPoolStoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoreStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportPoolStoreUnauthorized creates a ImportPoolStoreUnauthorized with default headers values
func NewImportPoolStoreUnauthorized() *ImportPoolStoreUnauthorized {
	return &ImportPoolStoreUnauthorized{}
}

/*ImportPoolStoreUnauthorized handles this case with default header values.

Unauthorized
*/
type ImportPoolStoreUnauthorized struct {
	Payload interface{}
}

func (o *ImportPoolStoreUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/poolstore][%d] importPoolStoreUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportPoolStoreUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *ImportPoolStoreUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportPoolStoreInternalServerError creates a ImportPoolStoreInternalServerError with default headers values
func NewImportPoolStoreInternalServerError() *ImportPoolStoreInternalServerError {
	return &ImportPoolStoreInternalServerError{}
}

/*ImportPoolStoreInternalServerError handles this case with default header values.

ImportPoolStoreInternalServerError import pool store internal server error
*/
type ImportPoolStoreInternalServerError struct {
	Payload interface{}
}

func (o *ImportPoolStoreInternalServerError) Error() string {
	return fmt.Sprintf("[POST /admin/poolstore][%d] importPoolStoreInternalServerError  %+v", 500, o.Payload)
}

func (o *ImportPoolStoreInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *ImportPoolStoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

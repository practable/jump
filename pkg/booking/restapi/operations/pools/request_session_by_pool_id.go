// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RequestSessionByPoolIDHandlerFunc turns a function with the right signature into a request session by pool ID handler
type RequestSessionByPoolIDHandlerFunc func(RequestSessionByPoolIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestSessionByPoolIDHandlerFunc) Handle(params RequestSessionByPoolIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// RequestSessionByPoolIDHandler interface for that can handle valid request session by pool ID params
type RequestSessionByPoolIDHandler interface {
	Handle(RequestSessionByPoolIDParams, interface{}) middleware.Responder
}

// NewRequestSessionByPoolID creates a new http.Handler for the request session by pool ID operation
func NewRequestSessionByPoolID(ctx *middleware.Context, handler RequestSessionByPoolIDHandler) *RequestSessionByPoolID {
	return &RequestSessionByPoolID{Context: ctx, Handler: handler}
}

/*RequestSessionByPoolID swagger:route POST /pools/{pool_id}/sessions pools requestSessionByPoolId

Requests a session from a pool

Request a session on an activity from the pool

*/
type RequestSessionByPoolID struct {
	Context *middleware.Context
	Handler RequestSessionByPoolIDHandler
}

func (o *RequestSessionByPoolID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRequestSessionByPoolIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

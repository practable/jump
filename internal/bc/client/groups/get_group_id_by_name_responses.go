// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetGroupIDByNameReader is a Reader for the GetGroupIDByName structure.
type GetGroupIDByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupIDByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupIDByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGroupIDByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGroupIDByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGroupIDByNameOK creates a GetGroupIDByNameOK with default headers values
func NewGetGroupIDByNameOK() *GetGroupIDByNameOK {
	return &GetGroupIDByNameOK{}
}

/* GetGroupIDByNameOK describes a response with status code 200, with default header values.

GetGroupIDByNameOK get group Id by name o k
*/
type GetGroupIDByNameOK struct {
	Payload []string
}

func (o *GetGroupIDByNameOK) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupIdByNameOK  %+v", 200, o.Payload)
}
func (o *GetGroupIDByNameOK) GetPayload() []string {
	return o.Payload
}

func (o *GetGroupIDByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupIDByNameUnauthorized creates a GetGroupIDByNameUnauthorized with default headers values
func NewGetGroupIDByNameUnauthorized() *GetGroupIDByNameUnauthorized {
	return &GetGroupIDByNameUnauthorized{}
}

/* GetGroupIDByNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGroupIDByNameUnauthorized struct {
	Payload interface{}
}

func (o *GetGroupIDByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupIdByNameUnauthorized  %+v", 401, o.Payload)
}
func (o *GetGroupIDByNameUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupIDByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupIDByNameInternalServerError creates a GetGroupIDByNameInternalServerError with default headers values
func NewGetGroupIDByNameInternalServerError() *GetGroupIDByNameInternalServerError {
	return &GetGroupIDByNameInternalServerError{}
}

/* GetGroupIDByNameInternalServerError describes a response with status code 500, with default header values.

GetGroupIDByNameInternalServerError get group Id by name internal server error
*/
type GetGroupIDByNameInternalServerError struct {
	Payload interface{}
}

func (o *GetGroupIDByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupIdByNameInternalServerError  %+v", 500, o.Payload)
}
func (o *GetGroupIDByNameInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupIDByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

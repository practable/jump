// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewSessionParams creates a new SessionParams object
// no default values defined in spec.
func NewSessionParams() SessionParams {

	return SessionParams{}
}

// SessionParams contains all the bound params for the session operation
// typically these are obtained from a http.Request
//
// swagger:parameters session
type SessionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Latest access time and end of session
	  Required: true
	  In: query
	*/
	Exp float64
	/*Earliest access time and start of session
	  Required: true
	  In: query
	*/
	Nbf float64
	/*The operator to apply on the variables
	  Required: true
	  In: query
	*/
	Scope string
	/*Session identification code
	  Required: true
	  In: path
	*/
	SessionID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSessionParams() beforehand.
func (o *SessionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qExp, qhkExp, _ := qs.GetOK("exp")
	if err := o.bindExp(qExp, qhkExp, route.Formats); err != nil {
		res = append(res, err)
	}

	qNbf, qhkNbf, _ := qs.GetOK("nbf")
	if err := o.bindNbf(qNbf, qhkNbf, route.Formats); err != nil {
		res = append(res, err)
	}

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	rSessionID, rhkSessionID, _ := route.Params.GetOK("session_id")
	if err := o.bindSessionID(rSessionID, rhkSessionID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExp binds and validates parameter Exp from query.
func (o *SessionParams) bindExp(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("exp", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("exp", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("exp", "query", "float64", raw)
	}
	o.Exp = value

	return nil
}

// bindNbf binds and validates parameter Nbf from query.
func (o *SessionParams) bindNbf(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("nbf", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("nbf", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("nbf", "query", "float64", raw)
	}
	o.Nbf = value

	return nil
}

// bindScope binds and validates parameter Scope from query.
func (o *SessionParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("scope", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("scope", "query", raw); err != nil {
		return err
	}

	o.Scope = raw

	if err := o.validateScope(formats); err != nil {
		return err
	}

	return nil
}

// validateScope carries on validations for parameter Scope
func (o *SessionParams) validateScope(formats strfmt.Registry) error {

	if err := validate.EnumCase("scope", "query", o.Scope, []interface{}{"readonly", "writeonly", "readwrite", "shellhost", "shellclient"}, true); err != nil {
		return err
	}

	return nil
}

// bindSessionID binds and validates parameter SessionID from path.
func (o *SessionParams) bindSessionID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.SessionID = raw

	return nil
}

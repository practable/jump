// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Description description
//
// Description of a resource e.g. pool, activity, user interface
// Example: {"further":"https://static.practable.io/descriptions/pools/penduino/index.html","image":"https://assets.practable.io/images/pools/penduino/image.png","long":"Some longer description","name":"Penduino (basic)","short":"Penduino electromagnetic pendulums with pulsed drive and braking","thumb":"https://assets.practable.io/images/pools/penduino/thumb.png","type":"pool"}
//
// swagger:model description
type Description struct {

	// URL for further information
	// Example: https://static.practable.io/info/penduino/ui.html
	Further string `json:"further,omitempty"`

	// Identification used in PoolStore
	ID string `json:"id,omitempty"`

	// URL of main image (500x500)
	// Example: https://assets.practable.io/images/penduino-500x500.png
	Image string `json:"image,omitempty"`

	// 280 char additional description of the interface in plain text
	Long string `json:"long,omitempty"`

	// Display name
	// Example: Penduino (basic)
	// Required: true
	Name *string `json:"name"`

	// 140 char max description of the interface in plain text
	// Example: Interface to the penduino electromagnetic pendulum with variable drive, active braking, short and open circuit loading.
	Short string `json:"short,omitempty"`

	// URL of thumbnail image (150x150)
	// Example: https://assets.practable.io/images/penduino-150x150.png
	Thumb string `json:"thumb,omitempty"`

	// Type of resource being described, e.g. pool, activity, userinterface
	// Example: userinterface
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this description
func (m *Description) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Description) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Description) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this description based on context it is used
func (m *Description) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Description) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Description) UnmarshalBinary(b []byte) error {
	var res Description
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
